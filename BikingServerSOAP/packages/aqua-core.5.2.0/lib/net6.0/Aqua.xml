<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aqua</name>
    </assembly>
    <members>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor(System.Type,Aqua.Dynamic.PropertySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class, setting the specified type.
            </summary>
            <param name="type">The type to be set.</param>
            <param name="propertySet">The property set representing this dynamic object's state.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor(Aqua.TypeSystem.TypeInfo,Aqua.Dynamic.PropertySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class,
            setting the specified <see cref="T:Aqua.TypeSystem.TypeInfo"/> and <see cref="T:Aqua.Dynamic.PropertySet"/>.
            </summary>
            <param name="type">The type to be set.</param>
            <param name="propertySet">The property set representing this dynamic object's state.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class, setting the specified members.
            </summary>
            <param name="properties">Initial collection of properties and their values.</param>
            <exception cref="T:System.ArgumentNullException">The specified members collection is <see langword="null"/>.</exception>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor(System.Collections.Generic.IEnumerable{Aqua.Dynamic.Property})">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class, setting the specified members.
            </summary>
            <param name="properties">Initial collection of properties and values.</param>
            <exception cref="T:System.ArgumentNullException">The specified members collection is <see langword="null"/>.</exception>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor(Aqua.Dynamic.PropertySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class with the given <see cref="T:Aqua.Dynamic.PropertySet"/>.
            </summary>
            <param name="propertySet">Initial collection of properties and values.</param>
            <exception cref="T:System.ArgumentNullException">The specified members collection is <see langword="null"/>.</exception>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor(System.Object,System.Type,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class,
            representing the object structure defined by the specified object.
            </summary>
            <param name="obj">The object to be represented by the new dynamic object.</param>
            <param name="type">Optional type information to be stored. If this argument is <see langword="null"/>, the value's type is stored instead.</param>
            <param name="mapper">Optional instance of dynamic object mapper.</param>
            <exception cref="T:System.ArgumentNullException">The specified object is <see langword="null"/>.</exception>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.#ctor(Aqua.Dynamic.DynamicObject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObject"/> class.
            </summary>
            <param name="dynamicObject">The instance to copy.</param>
            <param name="deepCopy">If <see langword="true"/> re-creates <see cref="T:Aqua.Dynamic.Property"/> instances,
            otherwise fills existing <see cref="T:Aqua.Dynamic.Property"/> instances into a new <see cref="T:Aqua.Dynamic.PropertySet"/>.</param>
            <exception cref="T:System.ArgumentNullException">The specified members collection is <see langword="null"/>.</exception>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObject.Type">
            <summary>
            Gets or sets the type of object represented by this dynamic object instance.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObject.Properties">
            <summary>
            Gets or sets the data members of this dynamic object instance.<br/>
            This property may be <see langword="null"/> for the dynamic object represent a <see langword="default"/> value.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObject.IsNull">
            <summary>
            Gets a value indicating whether target instance is <see langword="null"/>.
            </summary>
            <remarks>
            Returns <see langword="true"/> if <see cref="P:Aqua.Dynamic.DynamicObject.Properties"/> has not been set, <see langword="false"/> otherwise.
            </remarks>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObject.PropertyCount">
            <summary>
            Gets the count of members (dynamically added properties) hold by this dynamic object.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObject.PropertyNames">
            <summary>
            Gets a collection of member names hold by this dynamic object.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObject.Values">
            <summary>
            Gets a collection of member values hold by this dynamic object.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObject.Item(System.String)">
            <summary>
            Gets or sets a member value.
            </summary>
            <param name="name">Name of the member to set or get.</param>
            <returns>Value of the member specified.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Set(System.String,System.Object)">
            <summary>
            Sets a member and it's value.
            </summary>
            <param name="name">Name of the member to be assigned.</param>
            <param name="value">The value to be set.</param>
            <returns>The property that was either added or updated.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Set(Aqua.Dynamic.Property)">
            <summary>
            Sets a member.
            </summary>
            <param name="property">Property to be set.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Get(System.String)">
            <summary>
            Gets a member's value or <see langword="null"/> if the specified member is unknown.
            </summary>
            <param name="name">Name of the member for the value to be returned.</param>
            <returns>The value assigned to the member specified, <see langword="null"/> if member is not set.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Get``1(System.String)">
            <summary>
            Gets a member's value or <c>default(T)</c> if the specified member is <see langword="null"/> or unknown.
            </summary>
            <returns>The value assigned to the member specified, <c>default(T)</c> if member is <see langword="null"/> or not set.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Add(System.String,System.Object)">
            <summary>
            Adds a property and it's value.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Add(Aqua.Dynamic.Property)">
            <summary>
            Adds a property.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Remove(System.String)">
            <summary>
            Removes a member and it's value.
            </summary>
            <returns><see langword="true"/> if the member is successfully found and removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.TryGet(System.String,System.Object@)">
            <summary>
            Gets the value assigned to the specified member.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="value">When this method returns, contains the value assgned with the specified member,
            if the member is found; <see langword="null"/> if the member is not found.</param>
            <returns><see langword="true"/> is the dynamic object contains a member with the specified name; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.Create(System.Object,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates a dynamic objects representing the object structure defined by the specified object.
            </summary>
            <param name="obj">The object to be represented by the new dynamic object.</param>
            <param name="mapper">Optional instance of dynamic object mapper.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.CreateDefault(System.Type)">
            <summary>
            Creates a dynamic objects representing the type's default value.
            </summary>
            <param name="type">The type to be set on the dynamic object for the default value to be represented.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObject.CreateDefault(Aqua.TypeSystem.TypeInfo)">
            <summary>
            Creates a dynamic objects representing the type's default value.
            </summary>
            <param name="type">The type to be set on the dynamic object for the default value to be represented.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectExtensions.CreateObject(Aqua.Dynamic.DynamicObject,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of the object represented by the dynamic object specified.
            </summary>
            <param name="dynamicObject">The <see cref="T:Aqua.Dynamic.DynamicObject"/> to be mapped.</param>
            <remarks>Requires the Type property to be set on this dynamic object.</remarks>
            <param name="mapper">Optional instance of dynamic object mapper.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectExtensions.CreateObject(Aqua.Dynamic.DynamicObject,System.Type,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of the object type specified and populates the object structure represented by this dynamic object.
            </summary>
            <param name="dynamicObject">The <see cref="T:Aqua.Dynamic.DynamicObject"/> to be mapped.</param>
            <param name="type">Type of object to be created.</param>
            <param name="mapper">Optional instance of dynamic object mapper.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectExtensions.CreateObject``1(Aqua.Dynamic.DynamicObject,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of the object type specified and populates the object structure represented by this dynamic object.
            </summary>
            <param name="dynamicObject">The <see cref="T:Aqua.Dynamic.DynamicObject"/> to be mapped.</param>
            <typeparam name="T">Type of object to be created.</typeparam>
            <param name="mapper">Optional instance of dynamic object mapper.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectExtensions.IsSingleValueWrapper(Aqua.Dynamic.DynamicObject)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Aqua.Dynamic.DynamicObject"/> wraps a single value, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="T:Aqua.Dynamic.DynamicObjectMapper.ToContext">
            <summary>
            Execution context used for mapping to <see cref="T:Aqua.Dynamic.DynamicObject"/>s.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.ToContext.TryGetOrCreateNew(System.Type,System.Object,System.Func{System.Type,System.Object,System.Func{System.Type,System.Boolean},Aqua.Dynamic.DynamicObject},System.Action{System.Type,System.Object,Aqua.Dynamic.DynamicObject,System.Func{System.Type,System.Boolean}},System.Func{System.Type,System.Boolean})">
            <summary>
            Returns an existing instance if found in the reference map, creates a new instance otherwise.
            </summary>
        </member>
        <member name="T:Aqua.Dynamic.DynamicObjectMapper.FromContext">
            <summary>
            Execution context used for mapping from <see cref="T:Aqua.Dynamic.DynamicObject"/>s.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.FromContext.TryGetOrCreateNew(System.Type,Aqua.Dynamic.DynamicObject,System.Func{System.Type,Aqua.Dynamic.DynamicObject,System.Object},System.Action{System.Type,Aqua.Dynamic.DynamicObject,System.Object})">
            <summary>
            Returns an existing instance if found in the reference map, creates a new instance otherwise.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.#ctor(Aqua.TypeSystem.ITypeResolver,Aqua.TypeSystem.ITypeInfoProvider,Aqua.Dynamic.DynamicObjectMapperSettings,Aqua.Dynamic.IIsKnownTypeProvider,Aqua.Dynamic.ITypeSafetyChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObjectMapper"/> class.
            </summary>
            <param name="typeResolver">Provides a hook for custom logic for type resolution when mapping from <see cref="T:Aqua.Dynamic.DynamicObject"/>.</param>
            <param name="typeInfoProvider">Provides a hook for mapping type information when mapping to <see cref="T:Aqua.Dynamic.DynamicObject"/>.</param>
            <param name="settings">Optional settings for dynamic object mapping.</param>
            <param name="isKnownTypeProvider">Optional instance to decide whether a type requires to be mapped into a <see cref="T:Aqua.Dynamic.DynamicObject"/>, known types do not get mapped.</param>
            <param name="typeSafetyChecker">Optional instance to check types prior instance creation.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.#ctor(Aqua.Dynamic.DynamicObjectMapperSettings,Aqua.TypeSystem.ITypeResolver,Aqua.Dynamic.ITypeMapper,Aqua.Dynamic.IDynamicObjectFactory,Aqua.Dynamic.IIsKnownTypeProvider,Aqua.Dynamic.ITypeSafetyChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Dynamic.DynamicObjectMapper"/> class.
            </summary>
            <param name="settings">Optional settings for dynamic object mapping.</param>
            <param name="typeResolver">Optional instance to be used to resolve types.</param>
            <param name="typeMapper">This optional parameter allows mapping type information which get set into the <see cref="T:Aqua.Dynamic.DynamicObject"/>s upon their creation.</param>
            <param name="dynamicObjectFactory">This optional parameter allows injection of a custom factory for <see cref="T:Aqua.Dynamic.DynamicObject"/>.</param>
            <param name="isKnownTypeProvider">Optional instance to decide whether a type requires to be mapped into a <see cref="T:Aqua.Dynamic.DynamicObject"/>, known types do not get mapped.</param>
            <param name="typeSafetyChecker">Optional instance to check types prior instance creation.</param>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.Map(Aqua.Dynamic.DynamicObject,System.Type)">
            <summary>
            Maps a <see cref="T:Aqua.Dynamic.DynamicObject"/> into an instance of the actual type represented by the dynamic object.
            </summary>
            <param name="obj"><see cref="T:Aqua.Dynamic.DynamicObject"/> to be mapped.</param>
            <param name="targetType">Target type for mapping, set this parameter to <see langword="null"/> if type information included within <see cref="T:Aqua.Dynamic.DynamicObject"/> should be used.</param>
            <returns>The object created based on the <see cref="T:Aqua.Dynamic.DynamicObject"/> specified.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.MapObject(System.Object,System.Func{System.Type,System.Boolean})">
            <summary>
            Mapps the specified instance into a <see cref="T:Aqua.Dynamic.DynamicObject"/>.
            </summary>
            <remarks>Null references and <see cref="T:Aqua.Dynamic.DynamicObject"/> are not mapped.</remarks>
            <param name="obj">The instance to be mapped.</param>
            <param name="setTypeInformation">Set this parameter to <see langword="true"/> if type information should be included within the <see cref="T:Aqua.Dynamic.DynamicObject"/>,
            set it to <see langword="false"/> otherwise.</param>
            <returns>An instance of <see cref="T:Aqua.Dynamic.DynamicObject"/> representing the mapped instance.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.MapFromDynamicObjectGraph(System.Object,System.Type)">
            <summary>
            Maps an item of an object graph of <see cref="T:Aqua.Dynamic.DynamicObject"/> back into its normal representation.
            May be overridden in a derived class to implement a customized mapping strategy.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.MapToDynamicObjectGraph(System.Object,System.Func{System.Type,System.Boolean})">
            <summary>
            Maps an item of an object graph into a <see cref="T:Aqua.Dynamic.DynamicObject"/>.
            May be overridden in a derived class to implement a customized mapping strategy.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.ShouldMapToDynamicObject(System.Collections.IEnumerable)">
            <summary>
            When overridden in a derived class, determines whether a collection should be mapped into a single <see cref="T:Aqua.Dynamic.DynamicObject"/>,
            rather than into a collection of <see cref="T:Aqua.Dynamic.DynamicObject"/>s. Default is <see langword="false"/>.
            </summary>
            <returns><see langword="true"/> if the collection should be mapped into a single <see cref="T:Aqua.Dynamic.DynamicObject"/>,
            <see langword="false"/> if each element should be mapped separately. Default is <see langword="false"/>.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.MapToDynamicObjectIfRequired(System.Object,System.Func{System.Type,System.Boolean})">
            <summary>
            Maps from object to dynamic object if required.
            </summary>
            <remarks>Null references, strings, value types, and dynamic objects are no mapped.</remarks>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.PopulateObjectMembers(System.Type,System.Object,Aqua.Dynamic.DynamicObject,System.Func{System.Type,System.Boolean})">
            <summary>
            Extrancts member values from source object and populates to dynamic object.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.GetPropertiesForMapping(System.Type)">
            <summary>
            Can be overriden in a derived class to return a list of <see cref="T:System.Reflection.PropertyInfo"/> for a given type or <see langword="null"/> if defaul behaviour should be applied.
            </summary>
            <returns>If overriden in a derived class, returns a list of <see cref="T:System.Reflection.PropertyInfo"/> for a given type or <see langword="null"/> if defaul behaviour should be applied.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.GetFieldsForMapping(System.Type)">
            <summary>
            Can be overriden in a derived class to return a list of <see cref="T:System.Reflection.FieldInfo"/> for a given type or <see langword="null"/> if defaul behaviour should be applied.
            </summary>
            <returns>If overriden in a derived class, returns a list of <see cref="T:System.Reflection.FieldInfo"/> for a given type or <see langword="null"/> if defaul behaviour should be applied.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.TryGetObjectFactory(System.Type,Aqua.Dynamic.DynamicObject,System.Func{System.Object}@)">
            <summary>
            Can be overriden in a derived class to return a cutom object factory for a given type.
            </summary>
            <param name="targetType">The type of the instance to be created.</param>
            <param name="dynamicObject">Dynamic object holding data for the instance to be created.</param>
            <param name="factory">The factory function or <see langword="null"/> if <see langword="false"/> is returned as result.</param>
            <returns><see langword="true"/> if a factory function is assigned to the out parameter, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.TryGetObjectInitializer(System.Type,Aqua.Dynamic.DynamicObject,System.Action{System.Object}@)">
            <summary>
            Can be overriden in a derived class to return a cutom object initializer for a given instance.
            </summary>
            <param name="targetType">The type of the instance to be initalized.</param>
            <param name="dynamicObject">Dynamic object holding data for the instance to be initalized.</param>
            <param name="initializer">The initializer function or <see langword="null"/> if <see langword="false"/> is returned as result.</param>
            <returns><see langword="true"/> if an initializer function is assigned to the out parameter, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.MapInternal(System.Object,System.Func{System.Type,System.Boolean})">
            <summary>
            Maps an object to a dynamic object.
            </summary>
            <remarks>Null references and dynamic objects are not mapped.</remarks>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.GetUninitializedObject(System.Type)">
            <summary>
            Gets an uninitialized instance of the specified type by using <see cref="T:System.Runtime.Serialization.FormatterServices" />.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.PopulateObjectMembers(System.Type,Aqua.Dynamic.DynamicObject,System.Object)">
            <summary>
            Populate object members type by using <see cref="T:System.Runtime.Serialization.FormatterServices" />.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapper.MapObjectMembers(System.Type,System.Object,Aqua.Dynamic.DynamicObject,System.Func{System.Type,System.Boolean})">
            <summary>
            Retrieves object members type by using <see cref="T:System.Runtime.Serialization.FormatterServices" /> and populates dynamic object.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapperExtensions.Map``1(Aqua.Dynamic.IDynamicObjectMapper,Aqua.Dynamic.DynamicObject)">
            <summary>
            Maps a <see cref="T:Aqua.Dynamic.DynamicObject"/> into an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type in which the <see cref="T:Aqua.Dynamic.DynamicObject"/> have to be mapped to.</typeparam>
            <param name="objectMapper">The <see cref="T:Aqua.Dynamic.IDynamicObjectMapper"/> instance used to map the <see cref="T:Aqua.Dynamic.DynamicObject"/>s.</param>
            <param name="obj"><see cref="T:Aqua.Dynamic.DynamicObject"/> to be mapped.</param>
            <returns>The object created based on the <see cref="T:Aqua.Dynamic.DynamicObject"/> specified.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapperExtensions.Map(Aqua.Dynamic.IDynamicObjectMapper,System.Collections.Generic.IEnumerable{Aqua.Dynamic.DynamicObject},System.Type)">
            <summary>
            Maps a collection of <see cref="T:Aqua.Dynamic.DynamicObject" />s into a collection of objects.
            </summary>
            <param name="objectMapper">The <see cref="T:Aqua.Dynamic.IDynamicObjectMapper"/> instance used to map the <see cref="T:Aqua.Dynamic.DynamicObject"/>s.</param>
            <param name="objects">Collection of <see cref="T:Aqua.Dynamic.DynamicObject" /> to be mapped.</param>
            <param name="type">Target type for mapping, set this parameter to <see langword="null"/> if type information included within individual <see cref="T:Aqua.Dynamic.DynamicObject" />s should be used.</param>
            <returns>Collection of objects created based on the <see cref="T:Aqua.Dynamic.DynamicObject" />s specified.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapperExtensions.Map``1(Aqua.Dynamic.IDynamicObjectMapper,System.Collections.Generic.IEnumerable{Aqua.Dynamic.DynamicObject})">
            <summary>
            Maps a collection of <see cref="T:Aqua.Dynamic.DynamicObject" />s into a collection of <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The target type in which the <see cref="T:Aqua.Dynamic.DynamicObject" /> have to be mapped to.</typeparam>
            <param name="objectMapper">The <see cref="T:Aqua.Dynamic.IDynamicObjectMapper"/> instance used to map the <see cref="T:Aqua.Dynamic.DynamicObject"/>s.</param>
            <param name="objects">Collection of <see cref="T:Aqua.Dynamic.DynamicObject" />s to be mapped.</param>
            <returns>Collection of <typeparamref name="T" /> created based on the <see cref="T:Aqua.Dynamic.DynamicObject" />s specified.</returns>
        </member>
        <member name="M:Aqua.Dynamic.DynamicObjectMapperExtensions.MapCollection(Aqua.Dynamic.IDynamicObjectMapper,System.Object,System.Func{System.Type,System.Boolean})">
            <summary>
            Maps a collection of objects into a collection of <see cref="T:Aqua.Dynamic.DynamicObject"/>.
            </summary>
            <param name="objectMapper">The <see cref="T:Aqua.Dynamic.IDynamicObjectMapper"/> instance used to map the <see cref="T:Aqua.Dynamic.DynamicObject"/>s.</param>
            <param name="objects">The object to be mapped.</param>
            <param name="setTypeInformation">Set this parameter to <see langword="true"/> if type information should be included within the <see cref="T:Aqua.Dynamic.DynamicObject"/>s,
            set it to <see langword="false"/> otherwise.</param>
            <returns>A collection of <see cref="T:Aqua.Dynamic.DynamicObject"/> representing the objects specified.</returns>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObjectMapperSettings.SilentlySkipUnassignableMembers">
            <summary>
            Gets or sets a value indicating whether unasignalbe members should be skipped silenly.
            If set to <see langword="true"/> properties which cannot be assigned due to a type mismatch are silently skipped,
            if set to <see langword="false"/> no validation will be performed resulting in an exception when trying to assign a property value with an unmatching type.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObjectMapperSettings.FormatNativeTypesAsString">
            <summary>
            Gets or sets a value indicating whether native values (numeric, datetime, etc.) should be formatted as strings.
            If set to <see langword="true"/> all native type values are stored as strings, ohterwise native values get stored with no transformation.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObjectMapperSettings.UtilizeFormatterServices">
            <summary>
            Gets or sets a value indicating whether serializable types should be formatted using <see cref="T:System.Runtime.Serialization.FormatterServices"/>.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObjectMapperSettings.PassthroughAquaTypeSystemTypes">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Aqua.TypeSystem.TypeInfo"/> and <see cref="T:Aqua.TypeSystem.MemberInfo"/> types should be mapped.
            Aqua type system types are mapped only is this value is <see langword="false"/>.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObjectMapperSettings.PreserveMappingCache">
            <summary>
            Gets or sets a value indicating whether a cache of mapped objects should be preserved.
            Caching improves performance in case of subsequentely mapping the same objects again.
            This should be activated for mapping immutable objects only or if otherwise known, objects don't change their state.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Aqua.Dynamic.DynamicObjectMapperSettings.WrapNullAsDynamicObject">
            <summary>
            Gets or sets a value indicating whether null values should be wrapped as <see cref="T:Aqua.Dynamic.DynamicObject"/>.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.IDynamicObjectMapper.Map(Aqua.Dynamic.DynamicObject,System.Type)">
            <summary>
            Maps a <see cref="T:Aqua.Dynamic.DynamicObject"/> into a collection of objects.
            </summary>
            <param name="obj"><see cref="T:Aqua.Dynamic.DynamicObject"/> to be mapped.</param>
            <param name="targetType">Target type for mapping, set this parameter to <see langword="null"/> if type information included within <see cref="T:Aqua.Dynamic.DynamicObject"/> should be used.</param>
            <returns>The object created based on the <see cref="T:Aqua.Dynamic.DynamicObject"/> specified.</returns>
        </member>
        <member name="M:Aqua.Dynamic.IDynamicObjectMapper.MapObject(System.Object,System.Func{System.Type,System.Boolean})">
            <summary>
            Mapps the specified instance into a <see cref="T:Aqua.Dynamic.DynamicObject"/>.
            </summary>
            <param name="obj">The instance to be mapped.</param>
            <param name="setTypeInformation">Type information is included within the <see cref="T:Aqua.Dynamic.DynamicObject"/> if either lambda is <see langword="null"/> or returns <see langword="true"/>,
            no type information is set otherwise.</param>
            <returns>An instance of <see cref="T:Aqua.Dynamic.DynamicObject"/> representing the mapped instance.</returns>
        </member>
        <member name="M:Aqua.Dynamic.IIsKnownTypeProvider.IsKnownType(System.Type)">
            <summary>
            Returns a boolean value indicating whether the type specified is known.
            </summary>
            <param name="type">The type to be examined.</param>
        </member>
        <member name="T:Aqua.Dynamic.ITypeSafetyChecker">
            <summary>
            Denotes a type that allows to assert type safety for instace creation on mapping from <see cref="T:Aqua.Dynamic.DynamicObject"/> in reference to OWASP A8:2017-Insecure Deserialization.
            </summary>
        </member>
        <member name="M:Aqua.Dynamic.ITypeSafetyChecker.AssertTypeSafety(System.Type)">
            <summary>
            Asserts the <see cref="T:System.Type"/> specified is safe for instanciation.
            </summary>
            <param name="type">The type to be deserialized.</param>
        </member>
        <member name="T:Aqua.Dynamic.PropertySet">
            <summary>
            A set of properties where property names are considered as set keys.
            However, since <see cref="T:Aqua.Dynamic.Property" /> is not immutable a <see cref="T:Aqua.Dynamic.PropertySet"/> may technically not be considered a set
            and does not guarantee uniqueness of property names.
            </summary>
        </member>
        <member name="T:Aqua.Dynamic.UnmappedAttribute">
            <summary>
            Prevents annotated members to be mapped into <see cref="T:Aqua.Dynamic.DynamicObject"/>
            using <see cref="T:Aqua.Dynamic.DynamicObjectMapper"/>.
            </summary>
        </member>
        <member name="M:Aqua.EnumerableExtensions.EnumerableExtensions.CollectionEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares two collections for equality considering the same number of equal elements regardles of the elements sort order.
            </summary>
            <returns><see langword="true"/> if the collections are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Aqua.EnumerableExtensions.EnumerableExtensions.CollectionEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two collections for equality considering the same number of equal elements regardles of the elements sort order.
            </summary>
            <returns><see langword="true"/> if the collections are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Aqua.EnumerableExtensions.EnumerableExtensions.GetCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes a collection's hash code based on the elements contained. The hash code is not affected by the sort order.
            </summary>
            <returns>The collection's hash code.</returns>
        </member>
        <member name="M:Aqua.EnumerableExtensions.EnumerableExtensions.GetCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes a collection's hash code based on the elements contained. The hash code is not affected by the sort order.
            </summary>
            <returns>The collection's hash code.</returns>
        </member>
        <member name="M:Aqua.EnumerableExtensions.EnumerableExtensions.IsCollection(System.Object,System.Collections.IEnumerable@)">
            <summary>
            Returns <see langword="true"/> if the object is of type <see cref="T:System.Collections.IEnumerable"/> but not <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Aqua.MethodInfos.TElement">
            <summary>
            Type definition used in generic type filters.
            </summary>
        </member>
        <member name="T:Aqua.MethodInfos.TResult">
            <summary>
            Type definition used in generic type filters.
            </summary>
        </member>
        <member name="T:Aqua.MethodInfos.TSource">
            <summary>
            Type definition used in generic type filters.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.RuntimeReflectionExtensions.GetMethodEx(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get <see cref="T:System.Reflection.MethodInfo"/> using reflection.
            </summary>
            <remarks>
            This method should be used for types and method controlled by you only.
            For any other types, overload should be used to specify exact method signature.
            </remarks>
            <exception cref="T:System.InvalidOperationException">No method can be found matching specified criteria.</exception>
        </member>
        <member name="M:Aqua.TypeExtensions.RuntimeReflectionExtensions.GetMethodEx(System.Type,System.String,System.Type[])">
            <summary>
            Get <see cref="T:System.Reflection.MethodInfo"/> using reflection.
            </summary>
            <exception cref="T:System.InvalidOperationException">No method can be found matching specified criteria.</exception>
        </member>
        <member name="M:Aqua.TypeExtensions.RuntimeReflectionExtensions.GetMethodEx(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Get <see cref="T:System.Reflection.MethodInfo"/> using reflection.
            </summary>
            <exception cref="T:System.InvalidOperationException">No method can be found matching specified criteria.</exception>
        </member>
        <member name="M:Aqua.TypeExtensions.RuntimeReflectionExtensions.GetMethodEx(System.Type,System.String,System.Type[],System.Type[],System.Reflection.BindingFlags)">
            <summary>
            Get <see cref="T:System.Reflection.MethodInfo"/> using reflection.
            </summary>
            <exception cref="T:System.InvalidOperationException">No method can be found matching specified criteria.</exception>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.GetDefaultFieldsForSerialization(System.Type)">
            <summary>
            Gets the public instance fields for the given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.GetDefaultFieldsForDeserialization(System.Type)">
            <summary>
            Gets the public instance fields for the give <see cref="T:System.Type"/> which are not read-only.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.GetDefaultPropertiesForSerialization(System.Type)">
            <summary>
            Gets the public instance properties for the given <see cref="T:System.Type"/> which have a setter.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.GetDefaultPropertiesForDeserialization(System.Type)">
            <summary>
            Gets the public instance properties for the given <see cref="T:System.Type"/> which have a getter.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:System.Type"/> is either a reference type or a <see cref="T:System.Nullable`1"/> value type.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.TryDynamicCast(System.Type,System.Object,System.Object@)">
            <summary>
            Tries to convert object o to targetType using implicit or explicit operator.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:System.Type"/> is considered an anonymous type.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.IsEmittedType(System.Type)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:System.Type"/> is a dynamically emitted type.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.AsNonNullableType(System.Type)">
            <summary>
            Returns the non-nullable value type, or the type itself if <paramref name="type"/> is not of type <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.Implements(System.Type,System.Type)">
            <summary>
            Returns <see langword="true"/> if the give <see cref="T:System.Type"/> is assignable to the interface type specified.
            </summary>
            <param name="type">The type to be examined.</param>
            <param name="interfaceType">The actualy type to be checked for.</param>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.Implements(System.Type,System.Type,System.Type[]@)">
            <summary>
            Returns <see langword="true"/> if the give <see cref="T:System.Type"/> is assignable to the interface type specified.
            </summary>
            <param name="type">The type to be examined.</param>
            <param name="interfaceType">The actualy type to be checked for.</param>
            <param name="genericTypeArguments">Out parameter with array of generic argument types, in case <paramref name="interfaceType"/> is an open generic type.</param>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.IsEnum(System.Type)">
            <summary>
            Returns <see langword="true"/> if the give <see cref="T:System.Type"/> is an <c>enum</c>.
            </summary>
        </member>
        <member name="M:Aqua.TypeExtensions.TypeExtensions.GetFriendlyName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Returns a formatted string for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="includeNamespance"><see langword="true"/> is fullname should be included, <see langword="false"/> otherwise.</param>
            <param name="includeDeclaringType">Can be set <see langword="false"/> for nested types to supress name of declaring type.
            This has no effect for non-nested types or if <paramref name="includeNamespance"/> is <see langword="true"/>.</param>
            <returns>Formatted string for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Aqua.TypeSystem.TypeHelper.GetElementType(System.Type)">
            <summary>
            Returns the element type of the collection type specified, except for typeof(string).
            </summary>
            <param name="type">The collection type.</param>
            <returns>Collection element type if <paramref name="type"/> is a collection type. If <paramref name="type"/> is a non-collection or string type, <paramref name="type"/> is returned.</returns>
        </member>
        <member name="M:Aqua.TypeSystem.TypeHelper.If``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Returns <see langword="null"/> if the condition is not met, otherwise the actual value is returned.
            </summary>
        </member>
        <member name="M:Aqua.TypeSystem.TypeInfo.ToType">
            <summary>
            Returns the <see cref="T:System.Type"/> represented by this <see cref="T:Aqua.TypeSystem.TypeInfo"/> instance by resolving it using the default <see cref="T:Aqua.TypeSystem.TypeResolver"/>.
            </summary>
        </member>
        <member name="M:Aqua.TypeSystem.TypeInfo.GetFriendlyName(System.Boolean,System.Boolean)">
            <summary>
            Returns a formatted string for the given <see cref="T:Aqua.TypeSystem.TypeInfo"/>.
            </summary>
            <param name="includeNamespance"><see langword="true"/> is fullname should be included, <see langword="false"/> otherwise.</param>
            <param name="includeDeclaringType">Can be set <see langword="false"/> for nested types to supress name of declaring type.
            This has no effect for non-nested types or if <paramref name="includeNamespance"/> is <see langword="true"/>.</param>
            <returns>Formatted string for the given <see cref="T:Aqua.TypeSystem.TypeInfo"/>.</returns>
        </member>
        <member name="M:Aqua.TypeSystem.TypeInfoProvider.GetTypeInfo(System.Type,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns a <see cref="T:Aqua.TypeSystem.TypeInfo"/> representing the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to be represented.</param>
            <param name="includePropertyInfos">If provided overrules <seealso cref="P:Aqua.TypeSystem.TypeInfoProvider.IncludePropertyInfos"/> property set on class level.</param>
            <param name="setMemberDeclaringTypes">If provided overrules <seealso cref="P:Aqua.TypeSystem.TypeInfoProvider.SetMemberDeclaringTypes"/> property set on class level.</param>
            <returns>Returns a <see cref="T:Aqua.TypeSystem.TypeInfo"/> representing the specified <see cref="T:System.Type"/> or null if the type parameter is null.</returns>
        </member>
        <member name="P:Aqua.TypeSystem.TypeResolver.Instance">
            <summary>
            Gets or sets an instance of ITypeResolver.
            </summary>
            <remarks>
            Setting this property allows for registring a custom type resolver statically.
            Setting this property to <see langword="null"/> makes it fall-back to the default resolver.
            </remarks>
        </member>
        <member name="T:Aqua.Utils.TransparentCache`2">
            <summary>
            A weak-reference cache that can be hooked-in method calls to serve cached instances
            or transparently create the requested value if not contained in cache.
            </summary>
        </member>
        <member name="M:Aqua.Utils.TransparentCache`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Aqua.Utils.TransparentCache`2"/> class.
            </summary>
            <param name="cleanupDelay">Number of milliseconds to delay the task to clean-up stale references. Set to -1 to suppress clean-up or 0 to run clean-up synchronously.</param>
            <param name="comparer">Optional comparer for cache keys.</param>
        </member>
        <member name="M:Aqua.Utils.TransparentCache`2.GetOrCreate(`0,System.Func{`0,`1})">
            <summary>
            Returns the cached value if it's contained in the cache, otherwise it creates and adds the value to the cache.
            </summary>
            <remarks>
            This method also performes a cleanup of stale references according the cleanup-delay specified via cunstructor parameter.
            The cleanup task is started only if no other cleanup is pending.
            </remarks>
        </member>
        <member name="M:Aqua.Utils.TransparentCache`2.CleanUpStaleReferences">
            <summary>
            Removed cached items with stale references.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="M:_Check.CheckNotNull``1(``0,System.String)">
            <summary>
              Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="value"/> is <see langword="null"/>,
              otherwise the <paramref name="value"/> is returned.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="value"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.AssertNotNull``1(``0,System.String)">
            <summary>
              Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="value"/> is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
              Throws if <paramref name="value"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
        </member>
        <member name="M:_Check.CheckItemsNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="items"/> unless it or any element contained is <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.AssertItemsNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:_Check.AssertItemsNotNullOrEmpty(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/> or empty.</exception>
        </member>
    </members>
</doc>
